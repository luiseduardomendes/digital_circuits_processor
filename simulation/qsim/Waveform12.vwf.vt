// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/08/2022 10:40:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testes_vlg_sample_tst(
	instruction,
	sampler_tx
);
input [7:0] instruction;
output sampler_tx;

reg sample;
time current_time;
always @(instruction)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testes_vlg_check_tst (
	ADD,
	AND,
	HLT,
	JB,
	JC,
	JMP,
	JN,
	JNB,
	JNC,
	JNV,
	JNZ,
	JP,
	JV,
	JZ,
	LDA,
	NOP,
	NOT,
	OR,
	ROL,
	ROR,
	SHL,
	SHR,
	STA,
	SUB,
	sampler_rx
);
input  ADD;
input  AND;
input  HLT;
input  JB;
input  JC;
input  JMP;
input  JN;
input  JNB;
input  JNC;
input  JNV;
input  JNZ;
input  JP;
input  JV;
input  JZ;
input  LDA;
input  NOP;
input  NOT;
input  OR;
input  ROL;
input  ROR;
input  SHL;
input  SHR;
input  STA;
input  SUB;
input sampler_rx;

reg  ADD_expected;
reg  AND_expected;
reg  HLT_expected;
reg  JB_expected;
reg  JC_expected;
reg  JMP_expected;
reg  JN_expected;
reg  JNB_expected;
reg  JNC_expected;
reg  JNV_expected;
reg  JNZ_expected;
reg  JP_expected;
reg  JV_expected;
reg  JZ_expected;
reg  LDA_expected;
reg  NOP_expected;
reg  NOT_expected;
reg  OR_expected;
reg  ROL_expected;
reg  ROR_expected;
reg  SHL_expected;
reg  SHR_expected;
reg  STA_expected;
reg  SUB_expected;

reg  ADD_prev;
reg  AND_prev;
reg  HLT_prev;
reg  JB_prev;
reg  JC_prev;
reg  JMP_prev;
reg  JN_prev;
reg  JNB_prev;
reg  JNC_prev;
reg  JNV_prev;
reg  JNZ_prev;
reg  JP_prev;
reg  JV_prev;
reg  JZ_prev;
reg  LDA_prev;
reg  NOP_prev;
reg  NOT_prev;
reg  OR_prev;
reg  ROL_prev;
reg  ROR_prev;
reg  SHL_prev;
reg  SHR_prev;
reg  STA_prev;
reg  SUB_prev;

reg  ADD_expected_prev;
reg  AND_expected_prev;
reg  HLT_expected_prev;
reg  JB_expected_prev;
reg  JC_expected_prev;
reg  JMP_expected_prev;
reg  JN_expected_prev;
reg  JNB_expected_prev;
reg  JNC_expected_prev;
reg  JNV_expected_prev;
reg  JNZ_expected_prev;
reg  JP_expected_prev;
reg  JV_expected_prev;
reg  JZ_expected_prev;
reg  LDA_expected_prev;
reg  NOP_expected_prev;
reg  NOT_expected_prev;
reg  OR_expected_prev;
reg  ROL_expected_prev;
reg  ROR_expected_prev;
reg  SHL_expected_prev;
reg  SHR_expected_prev;
reg  STA_expected_prev;
reg  SUB_expected_prev;

reg  last_ADD_exp;
reg  last_AND_exp;
reg  last_HLT_exp;
reg  last_JB_exp;
reg  last_JC_exp;
reg  last_JMP_exp;
reg  last_JN_exp;
reg  last_JNB_exp;
reg  last_JNC_exp;
reg  last_JNV_exp;
reg  last_JNZ_exp;
reg  last_JP_exp;
reg  last_JV_exp;
reg  last_JZ_exp;
reg  last_LDA_exp;
reg  last_NOP_exp;
reg  last_NOT_exp;
reg  last_OR_exp;
reg  last_ROL_exp;
reg  last_ROR_exp;
reg  last_SHL_exp;
reg  last_SHR_exp;
reg  last_STA_exp;
reg  last_SUB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:24] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 24'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADD_prev = ADD;
	AND_prev = AND;
	HLT_prev = HLT;
	JB_prev = JB;
	JC_prev = JC;
	JMP_prev = JMP;
	JN_prev = JN;
	JNB_prev = JNB;
	JNC_prev = JNC;
	JNV_prev = JNV;
	JNZ_prev = JNZ;
	JP_prev = JP;
	JV_prev = JV;
	JZ_prev = JZ;
	LDA_prev = LDA;
	NOP_prev = NOP;
	NOT_prev = NOT;
	OR_prev = OR;
	ROL_prev = ROL;
	ROR_prev = ROR;
	SHL_prev = SHL;
	SHR_prev = SHR;
	STA_prev = STA;
	SUB_prev = SUB;
end

// update expected /o prevs

always @(trigger)
begin
	ADD_expected_prev = ADD_expected;
	AND_expected_prev = AND_expected;
	HLT_expected_prev = HLT_expected;
	JB_expected_prev = JB_expected;
	JC_expected_prev = JC_expected;
	JMP_expected_prev = JMP_expected;
	JN_expected_prev = JN_expected;
	JNB_expected_prev = JNB_expected;
	JNC_expected_prev = JNC_expected;
	JNV_expected_prev = JNV_expected;
	JNZ_expected_prev = JNZ_expected;
	JP_expected_prev = JP_expected;
	JV_expected_prev = JV_expected;
	JZ_expected_prev = JZ_expected;
	LDA_expected_prev = LDA_expected;
	NOP_expected_prev = NOP_expected;
	NOT_expected_prev = NOT_expected;
	OR_expected_prev = OR_expected;
	ROL_expected_prev = ROL_expected;
	ROR_expected_prev = ROR_expected;
	SHL_expected_prev = SHL_expected;
	SHR_expected_prev = SHR_expected;
	STA_expected_prev = STA_expected;
	SUB_expected_prev = SUB_expected;
end



// expected ADD
initial
begin
	ADD_expected = 1'bX;
end 

// expected AND
initial
begin
	AND_expected = 1'bX;
end 

// expected HLT
initial
begin
	HLT_expected = 1'bX;
end 

// expected JB
initial
begin
	JB_expected = 1'bX;
end 

// expected JC
initial
begin
	JC_expected = 1'bX;
end 

// expected JMP
initial
begin
	JMP_expected = 1'bX;
end 

// expected JN
initial
begin
	JN_expected = 1'bX;
end 

// expected JNB
initial
begin
	JNB_expected = 1'bX;
end 

// expected JNC
initial
begin
	JNC_expected = 1'bX;
end 

// expected JNV
initial
begin
	JNV_expected = 1'bX;
end 

// expected JNZ
initial
begin
	JNZ_expected = 1'bX;
end 

// expected JP
initial
begin
	JP_expected = 1'bX;
end 

// expected JV
initial
begin
	JV_expected = 1'bX;
end 

// expected JZ
initial
begin
	JZ_expected = 1'bX;
end 

// expected LDA
initial
begin
	LDA_expected = 1'bX;
end 

// expected NOP
initial
begin
	NOP_expected = 1'bX;
end 

// expected NOT
initial
begin
	NOT_expected = 1'bX;
end 

// expected OR
initial
begin
	OR_expected = 1'bX;
end 

// expected ROL
initial
begin
	ROL_expected = 1'bX;
end 

// expected ROR
initial
begin
	ROR_expected = 1'bX;
end 

// expected SHL
initial
begin
	SHL_expected = 1'bX;
end 

// expected SHR
initial
begin
	SHR_expected = 1'bX;
end 

// expected STA
initial
begin
	STA_expected = 1'bX;
end 

// expected SUB
initial
begin
	SUB_expected = 1'bX;
end 
// generate trigger
always @(ADD_expected or ADD or AND_expected or AND or HLT_expected or HLT or JB_expected or JB or JC_expected or JC or JMP_expected or JMP or JN_expected or JN or JNB_expected or JNB or JNC_expected or JNC or JNV_expected or JNV or JNZ_expected or JNZ or JP_expected or JP or JV_expected or JV or JZ_expected or JZ or LDA_expected or LDA or NOP_expected or NOP or NOT_expected or NOT or OR_expected or OR or ROL_expected or ROL or ROR_expected or ROR or SHL_expected or SHL or SHR_expected or SHR or STA_expected or STA or SUB_expected or SUB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADD = %b | expected AND = %b | expected HLT = %b | expected JB = %b | expected JC = %b | expected JMP = %b | expected JN = %b | expected JNB = %b | expected JNC = %b | expected JNV = %b | expected JNZ = %b | expected JP = %b | expected JV = %b | expected JZ = %b | expected LDA = %b | expected NOP = %b | expected NOT = %b | expected OR = %b | expected ROL = %b | expected ROR = %b | expected SHL = %b | expected SHR = %b | expected STA = %b | expected SUB = %b | ",ADD_expected_prev,AND_expected_prev,HLT_expected_prev,JB_expected_prev,JC_expected_prev,JMP_expected_prev,JN_expected_prev,JNB_expected_prev,JNC_expected_prev,JNV_expected_prev,JNZ_expected_prev,JP_expected_prev,JV_expected_prev,JZ_expected_prev,LDA_expected_prev,NOP_expected_prev,NOT_expected_prev,OR_expected_prev,ROL_expected_prev,ROR_expected_prev,SHL_expected_prev,SHR_expected_prev,STA_expected_prev,SUB_expected_prev);
	$display("| real ADD = %b | real AND = %b | real HLT = %b | real JB = %b | real JC = %b | real JMP = %b | real JN = %b | real JNB = %b | real JNC = %b | real JNV = %b | real JNZ = %b | real JP = %b | real JV = %b | real JZ = %b | real LDA = %b | real NOP = %b | real NOT = %b | real OR = %b | real ROL = %b | real ROR = %b | real SHL = %b | real SHR = %b | real STA = %b | real SUB = %b | ",ADD_prev,AND_prev,HLT_prev,JB_prev,JC_prev,JMP_prev,JN_prev,JNB_prev,JNC_prev,JNV_prev,JNZ_prev,JP_prev,JV_prev,JZ_prev,LDA_prev,NOP_prev,NOT_prev,OR_prev,ROL_prev,ROR_prev,SHL_prev,SHR_prev,STA_prev,SUB_prev);
`endif
	if (
		( ADD_expected_prev !== 1'bx ) && ( ADD_prev !== ADD_expected_prev )
		&& ((ADD_expected_prev !== last_ADD_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADD_expected_prev);
		$display ("     Real value = %b", ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADD_exp = ADD_expected_prev;
	end
	if (
		( AND_expected_prev !== 1'bx ) && ( AND_prev !== AND_expected_prev )
		&& ((AND_expected_prev !== last_AND_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AND_expected_prev);
		$display ("     Real value = %b", AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AND_exp = AND_expected_prev;
	end
	if (
		( HLT_expected_prev !== 1'bx ) && ( HLT_prev !== HLT_expected_prev )
		&& ((HLT_expected_prev !== last_HLT_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HLT_expected_prev);
		$display ("     Real value = %b", HLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HLT_exp = HLT_expected_prev;
	end
	if (
		( JB_expected_prev !== 1'bx ) && ( JB_prev !== JB_expected_prev )
		&& ((JB_expected_prev !== last_JB_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JB_expected_prev);
		$display ("     Real value = %b", JB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_JB_exp = JB_expected_prev;
	end
	if (
		( JC_expected_prev !== 1'bx ) && ( JC_prev !== JC_expected_prev )
		&& ((JC_expected_prev !== last_JC_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JC_expected_prev);
		$display ("     Real value = %b", JC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_JC_exp = JC_expected_prev;
	end
	if (
		( JMP_expected_prev !== 1'bx ) && ( JMP_prev !== JMP_expected_prev )
		&& ((JMP_expected_prev !== last_JMP_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JMP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JMP_expected_prev);
		$display ("     Real value = %b", JMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JMP_exp = JMP_expected_prev;
	end
	if (
		( JN_expected_prev !== 1'bx ) && ( JN_prev !== JN_expected_prev )
		&& ((JN_expected_prev !== last_JN_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JN_expected_prev);
		$display ("     Real value = %b", JN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_JN_exp = JN_expected_prev;
	end
	if (
		( JNB_expected_prev !== 1'bx ) && ( JNB_prev !== JNB_expected_prev )
		&& ((JNB_expected_prev !== last_JNB_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JNB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JNB_expected_prev);
		$display ("     Real value = %b", JNB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_JNB_exp = JNB_expected_prev;
	end
	if (
		( JNC_expected_prev !== 1'bx ) && ( JNC_prev !== JNC_expected_prev )
		&& ((JNC_expected_prev !== last_JNC_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JNC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JNC_expected_prev);
		$display ("     Real value = %b", JNC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JNC_exp = JNC_expected_prev;
	end
	if (
		( JNV_expected_prev !== 1'bx ) && ( JNV_prev !== JNV_expected_prev )
		&& ((JNV_expected_prev !== last_JNV_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JNV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JNV_expected_prev);
		$display ("     Real value = %b", JNV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_JNV_exp = JNV_expected_prev;
	end
	if (
		( JNZ_expected_prev !== 1'bx ) && ( JNZ_prev !== JNZ_expected_prev )
		&& ((JNZ_expected_prev !== last_JNZ_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JNZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JNZ_expected_prev);
		$display ("     Real value = %b", JNZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_JNZ_exp = JNZ_expected_prev;
	end
	if (
		( JP_expected_prev !== 1'bx ) && ( JP_prev !== JP_expected_prev )
		&& ((JP_expected_prev !== last_JP_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JP_expected_prev);
		$display ("     Real value = %b", JP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_JP_exp = JP_expected_prev;
	end
	if (
		( JV_expected_prev !== 1'bx ) && ( JV_prev !== JV_expected_prev )
		&& ((JV_expected_prev !== last_JV_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JV_expected_prev);
		$display ("     Real value = %b", JV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_JV_exp = JV_expected_prev;
	end
	if (
		( JZ_expected_prev !== 1'bx ) && ( JZ_prev !== JZ_expected_prev )
		&& ((JZ_expected_prev !== last_JZ_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JZ_expected_prev);
		$display ("     Real value = %b", JZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_JZ_exp = JZ_expected_prev;
	end
	if (
		( LDA_expected_prev !== 1'bx ) && ( LDA_prev !== LDA_expected_prev )
		&& ((LDA_expected_prev !== last_LDA_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDA_expected_prev);
		$display ("     Real value = %b", LDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_LDA_exp = LDA_expected_prev;
	end
	if (
		( NOP_expected_prev !== 1'bx ) && ( NOP_prev !== NOP_expected_prev )
		&& ((NOP_expected_prev !== last_NOP_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOP_expected_prev);
		$display ("     Real value = %b", NOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_NOP_exp = NOP_expected_prev;
	end
	if (
		( NOT_expected_prev !== 1'bx ) && ( NOT_prev !== NOT_expected_prev )
		&& ((NOT_expected_prev !== last_NOT_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOT_expected_prev);
		$display ("     Real value = %b", NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_NOT_exp = NOT_expected_prev;
	end
	if (
		( OR_expected_prev !== 1'bx ) && ( OR_prev !== OR_expected_prev )
		&& ((OR_expected_prev !== last_OR_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OR_expected_prev);
		$display ("     Real value = %b", OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_OR_exp = OR_expected_prev;
	end
	if (
		( ROL_expected_prev !== 1'bx ) && ( ROL_prev !== ROL_expected_prev )
		&& ((ROL_expected_prev !== last_ROL_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROL_expected_prev);
		$display ("     Real value = %b", ROL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ROL_exp = ROL_expected_prev;
	end
	if (
		( ROR_expected_prev !== 1'bx ) && ( ROR_prev !== ROR_expected_prev )
		&& ((ROR_expected_prev !== last_ROR_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROR_expected_prev);
		$display ("     Real value = %b", ROR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_ROR_exp = ROR_expected_prev;
	end
	if (
		( SHL_expected_prev !== 1'bx ) && ( SHL_prev !== SHL_expected_prev )
		&& ((SHL_expected_prev !== last_SHL_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SHL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SHL_expected_prev);
		$display ("     Real value = %b", SHL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_SHL_exp = SHL_expected_prev;
	end
	if (
		( SHR_expected_prev !== 1'bx ) && ( SHR_prev !== SHR_expected_prev )
		&& ((SHR_expected_prev !== last_SHR_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SHR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SHR_expected_prev);
		$display ("     Real value = %b", SHR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_SHR_exp = SHR_expected_prev;
	end
	if (
		( STA_expected_prev !== 1'bx ) && ( STA_prev !== STA_expected_prev )
		&& ((STA_expected_prev !== last_STA_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STA_expected_prev);
		$display ("     Real value = %b", STA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_STA_exp = STA_expected_prev;
	end
	if (
		( SUB_expected_prev !== 1'bx ) && ( SUB_prev !== SUB_expected_prev )
		&& ((SUB_expected_prev !== last_SUB_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SUB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SUB_expected_prev);
		$display ("     Real value = %b", SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_SUB_exp = SUB_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] instruction;
// wires                                               
wire ADD;
wire AND;
wire HLT;
wire JB;
wire JC;
wire JMP;
wire JN;
wire JNB;
wire JNC;
wire JNV;
wire JNZ;
wire JP;
wire JV;
wire JZ;
wire LDA;
wire NOP;
wire NOT;
wire OR;
wire ROL;
wire ROR;
wire SHL;
wire SHR;
wire STA;
wire SUB;

wire sampler;                             

// assign statements (if any)                          
testes i1 (
// port map - connection between master ports and signals/registers   
	.ADD(ADD),
	.\AND (AND),
	.HLT(HLT),
	.instruction(instruction),
	.JB(JB),
	.JC(JC),
	.JMP(JMP),
	.JN(JN),
	.JNB(JNB),
	.JNC(JNC),
	.JNV(JNV),
	.JNZ(JNZ),
	.JP(JP),
	.JV(JV),
	.JZ(JZ),
	.LDA(LDA),
	.NOP(NOP),
	.\NOT (NOT),
	.\OR (OR),
	.ROL(ROL),
	.ROR(ROR),
	.SHL(SHL),
	.SHR(SHR),
	.STA(STA),
	.SUB(SUB)
);
// instruction[ 7 ]
initial
begin
	instruction[7] = 1'b1;
	instruction[7] = #40000 1'b0;
	instruction[7] = #40000 1'b1;
	instruction[7] = #80000 1'b0;
	instruction[7] = #40000 1'b1;
	instruction[7] = #80000 1'b0;
	instruction[7] = #40000 1'b1;
	instruction[7] = #80000 1'b0;
	instruction[7] = #80000 1'b1;
	instruction[7] = #160000 1'b0;
	instruction[7] = #40000 1'b1;
	instruction[7] = #80000 1'b0;
	instruction[7] = #80000 1'b1;
	instruction[7] = #40000 1'b0;
end 
// instruction[ 6 ]
initial
begin
	instruction[6] = 1'b0;
	instruction[6] = #40000 1'b1;
	instruction[6] = #40000 1'b0;
	instruction[6] = #80000 1'b1;
	instruction[6] = #40000 1'b0;
	instruction[6] = #40000 1'b1;
	instruction[6] = #40000 1'b0;
	instruction[6] = #40000 1'b1;
	instruction[6] = #120000 1'b0;
	instruction[6] = #40000 1'b1;
	instruction[6] = #40000 1'b0;
	instruction[6] = #40000 1'b1;
	instruction[6] = #40000 1'b0;
	instruction[6] = #200000 1'b1;
	instruction[6] = #40000 1'b0;
	instruction[6] = #40000 1'b1;
end 
// instruction[ 5 ]
initial
begin
	instruction[5] = 1'b0;
	instruction[5] = #40000 1'b1;
	instruction[5] = #80000 1'b0;
	instruction[5] = #80000 1'b1;
	instruction[5] = #120000 1'b0;
	instruction[5] = #40000 1'b1;
	instruction[5] = #80000 1'b0;
	instruction[5] = #40000 1'b1;
	instruction[5] = #80000 1'b0;
	instruction[5] = #40000 1'b1;
	instruction[5] = #120000 1'b0;
	instruction[5] = #120000 1'b1;
	instruction[5] = #40000 1'b0;
	instruction[5] = #40000 1'b1;
end 
// instruction[ 4 ]
initial
begin
	instruction[4] = 1'b0;
	instruction[4] = #40000 1'b1;
	instruction[4] = #40000 1'b0;
	instruction[4] = #40000 1'b1;
	instruction[4] = #40000 1'b0;
	instruction[4] = #80000 1'b1;
	instruction[4] = #40000 1'b0;
	instruction[4] = #40000 1'b1;
	instruction[4] = #40000 1'b0;
	instruction[4] = #40000 1'b1;
	instruction[4] = #40000 1'b0;
	instruction[4] = #80000 1'b1;
	instruction[4] = #40000 1'b0;
	instruction[4] = #80000 1'b1;
	instruction[4] = #80000 1'b0;
end 
// instruction[ 3 ]
initial
begin
	instruction[3] = 1'b0;
	instruction[3] = #40000 1'b1;
	instruction[3] = #80000 1'b0;
	instruction[3] = #120000 1'b1;
	instruction[3] = #280000 1'b0;
	instruction[3] = #40000 1'b1;
	instruction[3] = #40000 1'b0;
	instruction[3] = #40000 1'b1;
	instruction[3] = #40000 1'b0;
	instruction[3] = #40000 1'b1;
	instruction[3] = #80000 1'b0;
	instruction[3] = #40000 1'b1;
end 
// instruction[ 2 ]
initial
begin
	instruction[2] = 1'b0;
	instruction[2] = #120000 1'b1;
	instruction[2] = #80000 1'b0;
	instruction[2] = #40000 1'b1;
	instruction[2] = #120000 1'b0;
	instruction[2] = #40000 1'b1;
	instruction[2] = #40000 1'b0;
	instruction[2] = #80000 1'b1;
	instruction[2] = #40000 1'b0;
	instruction[2] = #40000 1'b1;
	instruction[2] = #40000 1'b0;
	instruction[2] = #40000 1'b1;
	instruction[2] = #120000 1'b0;
end 
// instruction[ 1 ]
initial
begin
	instruction[1] = 1'b1;
	instruction[1] = #40000 1'b0;
	instruction[1] = #40000 1'b1;
	instruction[1] = #40000 1'b0;
	instruction[1] = #40000 1'b1;
	instruction[1] = #40000 1'b0;
	instruction[1] = #40000 1'b1;
	instruction[1] = #120000 1'b0;
	instruction[1] = #80000 1'b1;
	instruction[1] = #80000 1'b0;
	instruction[1] = #40000 1'b1;
	instruction[1] = #40000 1'b0;
	instruction[1] = #40000 1'b1;
	instruction[1] = #40000 1'b0;
	instruction[1] = #40000 1'b1;
	instruction[1] = #40000 1'b0;
	instruction[1] = #160000 1'b1;
end 
// instruction[ 0 ]
initial
begin
	instruction[0] = 1'b0;
	instruction[0] = #40000 1'b1;
	instruction[0] = #40000 1'b0;
	instruction[0] = #120000 1'b1;
	instruction[0] = #40000 1'b0;
	instruction[0] = #200000 1'b1;
	instruction[0] = #160000 1'b0;
	instruction[0] = #160000 1'b1;
	instruction[0] = #120000 1'b0;
	instruction[0] = #40000 1'b1;
end 

testes_vlg_sample_tst tb_sample (
	.instruction(instruction),
	.sampler_tx(sampler)
);

testes_vlg_check_tst tb_out(
	.ADD(ADD),
	.AND(AND),
	.HLT(HLT),
	.JB(JB),
	.JC(JC),
	.JMP(JMP),
	.JN(JN),
	.JNB(JNB),
	.JNC(JNC),
	.JNV(JNV),
	.JNZ(JNZ),
	.JP(JP),
	.JV(JV),
	.JZ(JZ),
	.LDA(LDA),
	.NOP(NOP),
	.NOT(NOT),
	.OR(OR),
	.ROL(ROL),
	.ROR(ROR),
	.SHL(SHL),
	.SHR(SHR),
	.STA(STA),
	.SUB(SUB),
	.sampler_rx(sampler)
);
endmodule

