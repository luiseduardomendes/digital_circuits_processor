// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/09/2022 19:33:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testes_vlg_sample_tst(
	ctrl,
	e0_,
	e1_,
	e2_,
	e3_,
	e4_,
	e5_,
	e6_,
	e7_,
	e8_,
	e9_,
	e10_,
	e11_,
	e12_,
	e13_,
	e14_,
	e15_,
	sampler_tx
);
input [3:0] ctrl;
input [7:0] e0_;
input [7:0] e1_;
input [7:0] e2_;
input [7:0] e3_;
input [7:0] e4_;
input [7:0] e5_;
input [7:0] e6_;
input [7:0] e7_;
input [7:0] e8_;
input [7:0] e9_;
input [7:0] e10_;
input [7:0] e11_;
input [7:0] e12_;
input [7:0] e13_;
input [7:0] e14_;
input [7:0] e15_;
output sampler_tx;

reg sample;
time current_time;
always @(ctrl or e0_ or e1_ or e2_ or e3_ or e4_ or e5_ or e6_ or e7_ or e8_ or e9_ or e10_ or e11_ or e12_ or e13_ or e14_ or e15_)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testes_vlg_check_tst (
	s,
	sampler_rx
);
input [7:0] s;
input sampler_rx;

reg [7:0] s_expected;

reg [7:0] s_prev;

reg [7:0] s_expected_prev;

reg [7:0] last_s_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	s_prev = s;
end

// update expected /o prevs

always @(trigger)
begin
	s_expected_prev = s_expected;
end


// expected s[ 7 ]
initial
begin
	s_expected[7] = 1'bX;
end 
// expected s[ 6 ]
initial
begin
	s_expected[6] = 1'bX;
end 
// expected s[ 5 ]
initial
begin
	s_expected[5] = 1'bX;
end 
// expected s[ 4 ]
initial
begin
	s_expected[4] = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 
// generate trigger
always @(s_expected or s)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected s = %b | ",s_expected_prev);
	$display("| real s = %b | ",s_prev);
`endif
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end
	if (
		( s_expected_prev[4] !== 1'bx ) && ( s_prev[4] !== s_expected_prev[4] )
		&& ((s_expected_prev[4] !== last_s_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[4] = s_expected_prev[4];
	end
	if (
		( s_expected_prev[5] !== 1'bx ) && ( s_prev[5] !== s_expected_prev[5] )
		&& ((s_expected_prev[5] !== last_s_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[5] = s_expected_prev[5];
	end
	if (
		( s_expected_prev[6] !== 1'bx ) && ( s_prev[6] !== s_expected_prev[6] )
		&& ((s_expected_prev[6] !== last_s_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[6] = s_expected_prev[6];
	end
	if (
		( s_expected_prev[7] !== 1'bx ) && ( s_prev[7] !== s_expected_prev[7] )
		&& ((s_expected_prev[7] !== last_s_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[7] = s_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ctrl;
reg [7:0] e0_;
reg [7:0] e1_;
reg [7:0] e2_;
reg [7:0] e3_;
reg [7:0] e4_;
reg [7:0] e5_;
reg [7:0] e6_;
reg [7:0] e7_;
reg [7:0] e8_;
reg [7:0] e9_;
reg [7:0] e10_;
reg [7:0] e11_;
reg [7:0] e12_;
reg [7:0] e13_;
reg [7:0] e14_;
reg [7:0] e15_;
// wires                                               
wire [7:0] s;

wire sampler;                             

// assign statements (if any)                          
testes i1 (
// port map - connection between master ports and signals/registers   
	.ctrl(ctrl),
	.e0_(e0_),
	.e1_(e1_),
	.e2_(e2_),
	.e3_(e3_),
	.e4_(e4_),
	.e5_(e5_),
	.e6_(e6_),
	.e7_(e7_),
	.e8_(e8_),
	.e9_(e9_),
	.e10_(e10_),
	.e11_(e11_),
	.e12_(e12_),
	.e13_(e13_),
	.e14_(e14_),
	.e15_(e15_),
	.s(s)
);
// ctrl[ 3 ]
initial
begin
	ctrl[3] = 1'b0;
	ctrl[3] = #320000 1'b1;
	ctrl[3] = #320000 1'b0;
	ctrl[3] = #320000 1'b1;
end 
// ctrl[ 2 ]
initial
begin
	repeat(3)
	begin
		ctrl[2] = 1'b0;
		ctrl[2] = #160000 1'b1;
		# 160000;
	end
	ctrl[2] = 1'b0;
end 
// ctrl[ 1 ]
initial
begin
	repeat(6)
	begin
		ctrl[1] = 1'b0;
		ctrl[1] = #80000 1'b1;
		# 80000;
	end
	ctrl[1] = 1'b0;
end 
// ctrl[ 0 ]
initial
begin
	repeat(12)
	begin
		ctrl[0] = 1'b0;
		ctrl[0] = #40000 1'b1;
		# 40000;
	end
	ctrl[0] = 1'b0;
end 
// e0_[ 7 ]
initial
begin
	e0_[7] = 1'b0;
end 
// e0_[ 6 ]
initial
begin
	e0_[6] = 1'b0;
end 
// e0_[ 5 ]
initial
begin
	e0_[5] = 1'b0;
end 
// e0_[ 4 ]
initial
begin
	e0_[4] = 1'b0;
end 
// e0_[ 3 ]
initial
begin
	e0_[3] = 1'b0;
end 
// e0_[ 2 ]
initial
begin
	e0_[2] = 1'b0;
end 
// e0_[ 1 ]
initial
begin
	e0_[1] = 1'b0;
end 
// e0_[ 0 ]
initial
begin
	e0_[0] = 1'b0;
end 
// e1_[ 7 ]
initial
begin
	e1_[7] = 1'b0;
end 
// e1_[ 6 ]
initial
begin
	e1_[6] = 1'b0;
end 
// e1_[ 5 ]
initial
begin
	e1_[5] = 1'b0;
end 
// e1_[ 4 ]
initial
begin
	e1_[4] = 1'b0;
end 
// e1_[ 3 ]
initial
begin
	e1_[3] = 1'b0;
end 
// e1_[ 2 ]
initial
begin
	e1_[2] = 1'b0;
end 
// e1_[ 1 ]
initial
begin
	e1_[1] = 1'b0;
end 
// e1_[ 0 ]
initial
begin
	e1_[0] = 1'b1;
end 
// e2_[ 7 ]
initial
begin
	e2_[7] = 1'b0;
end 
// e2_[ 6 ]
initial
begin
	e2_[6] = 1'b0;
end 
// e2_[ 5 ]
initial
begin
	e2_[5] = 1'b0;
end 
// e2_[ 4 ]
initial
begin
	e2_[4] = 1'b0;
end 
// e2_[ 3 ]
initial
begin
	e2_[3] = 1'b0;
end 
// e2_[ 2 ]
initial
begin
	e2_[2] = 1'b0;
end 
// e2_[ 1 ]
initial
begin
	e2_[1] = 1'b1;
end 
// e2_[ 0 ]
initial
begin
	e2_[0] = 1'b0;
end 
// e3_[ 7 ]
initial
begin
	e3_[7] = 1'b0;
end 
// e3_[ 6 ]
initial
begin
	e3_[6] = 1'b0;
end 
// e3_[ 5 ]
initial
begin
	e3_[5] = 1'b0;
end 
// e3_[ 4 ]
initial
begin
	e3_[4] = 1'b0;
end 
// e3_[ 3 ]
initial
begin
	e3_[3] = 1'b0;
end 
// e3_[ 2 ]
initial
begin
	e3_[2] = 1'b0;
end 
// e3_[ 1 ]
initial
begin
	e3_[1] = 1'b1;
end 
// e3_[ 0 ]
initial
begin
	e3_[0] = 1'b1;
end 
// e4_[ 7 ]
initial
begin
	e4_[7] = 1'b0;
end 
// e4_[ 6 ]
initial
begin
	e4_[6] = 1'b0;
end 
// e4_[ 5 ]
initial
begin
	e4_[5] = 1'b0;
end 
// e4_[ 4 ]
initial
begin
	e4_[4] = 1'b0;
end 
// e4_[ 3 ]
initial
begin
	e4_[3] = 1'b0;
end 
// e4_[ 2 ]
initial
begin
	e4_[2] = 1'b1;
end 
// e4_[ 1 ]
initial
begin
	e4_[1] = 1'b0;
end 
// e4_[ 0 ]
initial
begin
	e4_[0] = 1'b0;
end 
// e5_[ 7 ]
initial
begin
	e5_[7] = 1'b0;
end 
// e5_[ 6 ]
initial
begin
	e5_[6] = 1'b0;
end 
// e5_[ 5 ]
initial
begin
	e5_[5] = 1'b0;
end 
// e5_[ 4 ]
initial
begin
	e5_[4] = 1'b0;
end 
// e5_[ 3 ]
initial
begin
	e5_[3] = 1'b0;
end 
// e5_[ 2 ]
initial
begin
	e5_[2] = 1'b1;
end 
// e5_[ 1 ]
initial
begin
	e5_[1] = 1'b0;
end 
// e5_[ 0 ]
initial
begin
	e5_[0] = 1'b1;
end 
// e6_[ 7 ]
initial
begin
	e6_[7] = 1'b0;
end 
// e6_[ 6 ]
initial
begin
	e6_[6] = 1'b0;
end 
// e6_[ 5 ]
initial
begin
	e6_[5] = 1'b0;
end 
// e6_[ 4 ]
initial
begin
	e6_[4] = 1'b0;
end 
// e6_[ 3 ]
initial
begin
	e6_[3] = 1'b0;
end 
// e6_[ 2 ]
initial
begin
	e6_[2] = 1'b1;
end 
// e6_[ 1 ]
initial
begin
	e6_[1] = 1'b1;
end 
// e6_[ 0 ]
initial
begin
	e6_[0] = 1'b0;
end 
// e7_[ 7 ]
initial
begin
	e7_[7] = 1'b0;
end 
// e7_[ 6 ]
initial
begin
	e7_[6] = 1'b0;
end 
// e7_[ 5 ]
initial
begin
	e7_[5] = 1'b0;
end 
// e7_[ 4 ]
initial
begin
	e7_[4] = 1'b0;
end 
// e7_[ 3 ]
initial
begin
	e7_[3] = 1'b0;
end 
// e7_[ 2 ]
initial
begin
	e7_[2] = 1'b1;
end 
// e7_[ 1 ]
initial
begin
	e7_[1] = 1'b1;
end 
// e7_[ 0 ]
initial
begin
	e7_[0] = 1'b1;
end 
// e8_[ 7 ]
initial
begin
	e8_[7] = 1'b0;
end 
// e8_[ 6 ]
initial
begin
	e8_[6] = 1'b0;
end 
// e8_[ 5 ]
initial
begin
	e8_[5] = 1'b0;
end 
// e8_[ 4 ]
initial
begin
	e8_[4] = 1'b0;
end 
// e8_[ 3 ]
initial
begin
	e8_[3] = 1'b1;
end 
// e8_[ 2 ]
initial
begin
	e8_[2] = 1'b0;
end 
// e8_[ 1 ]
initial
begin
	e8_[1] = 1'b0;
end 
// e8_[ 0 ]
initial
begin
	e8_[0] = 1'b0;
end 
// e9_[ 7 ]
initial
begin
	e9_[7] = 1'b0;
end 
// e9_[ 6 ]
initial
begin
	e9_[6] = 1'b0;
end 
// e9_[ 5 ]
initial
begin
	e9_[5] = 1'b0;
end 
// e9_[ 4 ]
initial
begin
	e9_[4] = 1'b0;
end 
// e9_[ 3 ]
initial
begin
	e9_[3] = 1'b1;
end 
// e9_[ 2 ]
initial
begin
	e9_[2] = 1'b0;
end 
// e9_[ 1 ]
initial
begin
	e9_[1] = 1'b0;
end 
// e9_[ 0 ]
initial
begin
	e9_[0] = 1'b1;
end 
// e10_[ 7 ]
initial
begin
	e10_[7] = 1'b0;
end 
// e10_[ 6 ]
initial
begin
	e10_[6] = 1'b0;
end 
// e10_[ 5 ]
initial
begin
	e10_[5] = 1'b0;
end 
// e10_[ 4 ]
initial
begin
	e10_[4] = 1'b0;
end 
// e10_[ 3 ]
initial
begin
	e10_[3] = 1'b1;
end 
// e10_[ 2 ]
initial
begin
	e10_[2] = 1'b0;
end 
// e10_[ 1 ]
initial
begin
	e10_[1] = 1'b1;
end 
// e10_[ 0 ]
initial
begin
	e10_[0] = 1'b0;
end 
// e11_[ 7 ]
initial
begin
	e11_[7] = 1'b0;
end 
// e11_[ 6 ]
initial
begin
	e11_[6] = 1'b0;
end 
// e11_[ 5 ]
initial
begin
	e11_[5] = 1'b0;
end 
// e11_[ 4 ]
initial
begin
	e11_[4] = 1'b0;
end 
// e11_[ 3 ]
initial
begin
	e11_[3] = 1'b1;
end 
// e11_[ 2 ]
initial
begin
	e11_[2] = 1'b0;
end 
// e11_[ 1 ]
initial
begin
	e11_[1] = 1'b1;
end 
// e11_[ 0 ]
initial
begin
	e11_[0] = 1'b1;
end 
// e12_[ 7 ]
initial
begin
	e12_[7] = 1'b0;
end 
// e12_[ 6 ]
initial
begin
	e12_[6] = 1'b0;
end 
// e12_[ 5 ]
initial
begin
	e12_[5] = 1'b0;
end 
// e12_[ 4 ]
initial
begin
	e12_[4] = 1'b0;
end 
// e12_[ 3 ]
initial
begin
	e12_[3] = 1'b1;
end 
// e12_[ 2 ]
initial
begin
	e12_[2] = 1'b1;
end 
// e12_[ 1 ]
initial
begin
	e12_[1] = 1'b0;
end 
// e12_[ 0 ]
initial
begin
	e12_[0] = 1'b0;
end 
// e13_[ 7 ]
initial
begin
	e13_[7] = 1'b0;
end 
// e13_[ 6 ]
initial
begin
	e13_[6] = 1'b0;
end 
// e13_[ 5 ]
initial
begin
	e13_[5] = 1'b0;
end 
// e13_[ 4 ]
initial
begin
	e13_[4] = 1'b0;
end 
// e13_[ 3 ]
initial
begin
	e13_[3] = 1'b1;
end 
// e13_[ 2 ]
initial
begin
	e13_[2] = 1'b1;
end 
// e13_[ 1 ]
initial
begin
	e13_[1] = 1'b0;
end 
// e13_[ 0 ]
initial
begin
	e13_[0] = 1'b1;
end 
// e14_[ 7 ]
initial
begin
	e14_[7] = 1'b0;
end 
// e14_[ 6 ]
initial
begin
	e14_[6] = 1'b0;
end 
// e14_[ 5 ]
initial
begin
	e14_[5] = 1'b0;
end 
// e14_[ 4 ]
initial
begin
	e14_[4] = 1'b0;
end 
// e14_[ 3 ]
initial
begin
	e14_[3] = 1'b1;
end 
// e14_[ 2 ]
initial
begin
	e14_[2] = 1'b1;
end 
// e14_[ 1 ]
initial
begin
	e14_[1] = 1'b1;
end 
// e14_[ 0 ]
initial
begin
	e14_[0] = 1'b0;
end 
// e15_[ 7 ]
initial
begin
	e15_[7] = 1'b0;
end 
// e15_[ 6 ]
initial
begin
	e15_[6] = 1'b0;
end 
// e15_[ 5 ]
initial
begin
	e15_[5] = 1'b0;
end 
// e15_[ 4 ]
initial
begin
	e15_[4] = 1'b0;
end 
// e15_[ 3 ]
initial
begin
	e15_[3] = 1'b1;
end 
// e15_[ 2 ]
initial
begin
	e15_[2] = 1'b1;
end 
// e15_[ 1 ]
initial
begin
	e15_[1] = 1'b1;
end 
// e15_[ 0 ]
initial
begin
	e15_[0] = 1'b1;
end 

testes_vlg_sample_tst tb_sample (
	.ctrl(ctrl),
	.e0_(e0_),
	.e1_(e1_),
	.e2_(e2_),
	.e3_(e3_),
	.e4_(e4_),
	.e5_(e5_),
	.e6_(e6_),
	.e7_(e7_),
	.e8_(e8_),
	.e9_(e9_),
	.e10_(e10_),
	.e11_(e11_),
	.e12_(e12_),
	.e13_(e13_),
	.e14_(e14_),
	.e15_(e15_),
	.sampler_tx(sampler)
);

testes_vlg_check_tst tb_out(
	.s(s),
	.sampler_rx(sampler)
);
endmodule

