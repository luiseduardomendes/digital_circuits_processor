// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/05/2022 22:29:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final_work
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_work_vlg_sample_tst(
	Ck,
	instr,
	N,
	Rst,
	Z,
	sampler_tx
);
input  Ck;
input [3:0] instr;
input  N;
input  Rst;
input  Z;
output sampler_tx;

reg sample;
time current_time;
always @(Ck or instr or N or Rst or Z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_work_vlg_check_tst (
	cf_rem,
	cg_ac,
	cg_nz,
	cg_pc,
	cg_rdm,
	cg_ri,
	ctrl_rem,
	inc_pc,
	read,
	write,
	sampler_rx
);
input  cf_rem;
input  cg_ac;
input  cg_nz;
input  cg_pc;
input  cg_rdm;
input  cg_ri;
input  ctrl_rem;
input  inc_pc;
input  read;
input  write;
input sampler_rx;

reg  cf_rem_expected;
reg  cg_ac_expected;
reg  cg_nz_expected;
reg  cg_pc_expected;
reg  cg_rdm_expected;
reg  cg_ri_expected;
reg  ctrl_rem_expected;
reg  inc_pc_expected;
reg  read_expected;
reg  write_expected;

reg  cf_rem_prev;
reg  cg_ac_prev;
reg  cg_nz_prev;
reg  cg_pc_prev;
reg  cg_rdm_prev;
reg  cg_ri_prev;
reg  ctrl_rem_prev;
reg  inc_pc_prev;
reg  read_prev;
reg  write_prev;

reg  cf_rem_expected_prev;
reg  cg_ac_expected_prev;
reg  cg_nz_expected_prev;
reg  cg_pc_expected_prev;
reg  cg_rdm_expected_prev;
reg  cg_ri_expected_prev;
reg  ctrl_rem_expected_prev;
reg  inc_pc_expected_prev;
reg  read_expected_prev;
reg  write_expected_prev;

reg  last_cf_rem_exp;
reg  last_cg_ac_exp;
reg  last_cg_nz_exp;
reg  last_cg_pc_exp;
reg  last_cg_rdm_exp;
reg  last_cg_ri_exp;
reg  last_ctrl_rem_exp;
reg  last_inc_pc_exp;
reg  last_read_exp;
reg  last_write_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	cf_rem_prev = cf_rem;
	cg_ac_prev = cg_ac;
	cg_nz_prev = cg_nz;
	cg_pc_prev = cg_pc;
	cg_rdm_prev = cg_rdm;
	cg_ri_prev = cg_ri;
	ctrl_rem_prev = ctrl_rem;
	inc_pc_prev = inc_pc;
	read_prev = read;
	write_prev = write;
end

// update expected /o prevs

always @(trigger)
begin
	cf_rem_expected_prev = cf_rem_expected;
	cg_ac_expected_prev = cg_ac_expected;
	cg_nz_expected_prev = cg_nz_expected;
	cg_pc_expected_prev = cg_pc_expected;
	cg_rdm_expected_prev = cg_rdm_expected;
	cg_ri_expected_prev = cg_ri_expected;
	ctrl_rem_expected_prev = ctrl_rem_expected;
	inc_pc_expected_prev = inc_pc_expected;
	read_expected_prev = read_expected;
	write_expected_prev = write_expected;
end



// expected cf_rem
initial
begin
	cf_rem_expected = 1'bX;
end 

// expected cg_ac
initial
begin
	cg_ac_expected = 1'bX;
end 

// expected cg_nz
initial
begin
	cg_nz_expected = 1'bX;
end 

// expected cg_pc
initial
begin
	cg_pc_expected = 1'bX;
end 

// expected cg_rdm
initial
begin
	cg_rdm_expected = 1'bX;
end 

// expected cg_ri
initial
begin
	cg_ri_expected = 1'bX;
end 

// expected ctrl_rem
initial
begin
	ctrl_rem_expected = 1'bX;
end 

// expected inc_pc
initial
begin
	inc_pc_expected = 1'bX;
end 

// expected read
initial
begin
	read_expected = 1'bX;
end 

// expected write
initial
begin
	write_expected = 1'bX;
end 
// generate trigger
always @(cf_rem_expected or cf_rem or cg_ac_expected or cg_ac or cg_nz_expected or cg_nz or cg_pc_expected or cg_pc or cg_rdm_expected or cg_rdm or cg_ri_expected or cg_ri or ctrl_rem_expected or ctrl_rem or inc_pc_expected or inc_pc or read_expected or read or write_expected or write)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cf_rem = %b | expected cg_ac = %b | expected cg_nz = %b | expected cg_pc = %b | expected cg_rdm = %b | expected cg_ri = %b | expected ctrl_rem = %b | expected inc_pc = %b | expected read = %b | expected write = %b | ",cf_rem_expected_prev,cg_ac_expected_prev,cg_nz_expected_prev,cg_pc_expected_prev,cg_rdm_expected_prev,cg_ri_expected_prev,ctrl_rem_expected_prev,inc_pc_expected_prev,read_expected_prev,write_expected_prev);
	$display("| real cf_rem = %b | real cg_ac = %b | real cg_nz = %b | real cg_pc = %b | real cg_rdm = %b | real cg_ri = %b | real ctrl_rem = %b | real inc_pc = %b | real read = %b | real write = %b | ",cf_rem_prev,cg_ac_prev,cg_nz_prev,cg_pc_prev,cg_rdm_prev,cg_ri_prev,ctrl_rem_prev,inc_pc_prev,read_prev,write_prev);
`endif
	if (
		( cf_rem_expected_prev !== 1'bx ) && ( cf_rem_prev !== cf_rem_expected_prev )
		&& ((cf_rem_expected_prev !== last_cf_rem_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cf_rem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cf_rem_expected_prev);
		$display ("     Real value = %b", cf_rem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cf_rem_exp = cf_rem_expected_prev;
	end
	if (
		( cg_ac_expected_prev !== 1'bx ) && ( cg_ac_prev !== cg_ac_expected_prev )
		&& ((cg_ac_expected_prev !== last_cg_ac_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_ac :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_ac_expected_prev);
		$display ("     Real value = %b", cg_ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cg_ac_exp = cg_ac_expected_prev;
	end
	if (
		( cg_nz_expected_prev !== 1'bx ) && ( cg_nz_prev !== cg_nz_expected_prev )
		&& ((cg_nz_expected_prev !== last_cg_nz_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_nz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_nz_expected_prev);
		$display ("     Real value = %b", cg_nz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cg_nz_exp = cg_nz_expected_prev;
	end
	if (
		( cg_pc_expected_prev !== 1'bx ) && ( cg_pc_prev !== cg_pc_expected_prev )
		&& ((cg_pc_expected_prev !== last_cg_pc_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_pc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_pc_expected_prev);
		$display ("     Real value = %b", cg_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cg_pc_exp = cg_pc_expected_prev;
	end
	if (
		( cg_rdm_expected_prev !== 1'bx ) && ( cg_rdm_prev !== cg_rdm_expected_prev )
		&& ((cg_rdm_expected_prev !== last_cg_rdm_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_rdm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_rdm_expected_prev);
		$display ("     Real value = %b", cg_rdm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cg_rdm_exp = cg_rdm_expected_prev;
	end
	if (
		( cg_ri_expected_prev !== 1'bx ) && ( cg_ri_prev !== cg_ri_expected_prev )
		&& ((cg_ri_expected_prev !== last_cg_ri_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_ri :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_ri_expected_prev);
		$display ("     Real value = %b", cg_ri_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cg_ri_exp = cg_ri_expected_prev;
	end
	if (
		( ctrl_rem_expected_prev !== 1'bx ) && ( ctrl_rem_prev !== ctrl_rem_expected_prev )
		&& ((ctrl_rem_expected_prev !== last_ctrl_rem_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_rem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_rem_expected_prev);
		$display ("     Real value = %b", ctrl_rem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ctrl_rem_exp = ctrl_rem_expected_prev;
	end
	if (
		( inc_pc_expected_prev !== 1'bx ) && ( inc_pc_prev !== inc_pc_expected_prev )
		&& ((inc_pc_expected_prev !== last_inc_pc_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inc_pc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inc_pc_expected_prev);
		$display ("     Real value = %b", inc_pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inc_pc_exp = inc_pc_expected_prev;
	end
	if (
		( read_expected_prev !== 1'bx ) && ( read_prev !== read_expected_prev )
		&& ((read_expected_prev !== last_read_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_expected_prev);
		$display ("     Real value = %b", read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_read_exp = read_expected_prev;
	end
	if (
		( write_expected_prev !== 1'bx ) && ( write_prev !== write_expected_prev )
		&& ((write_expected_prev !== last_write_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_expected_prev);
		$display ("     Real value = %b", write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_write_exp = write_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_work_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Ck;
reg [3:0] instr;
reg N;
reg Rst;
reg Z;
// wires                                               
wire cf_rem;
wire cg_ac;
wire cg_nz;
wire cg_pc;
wire cg_rdm;
wire cg_ri;
wire ctrl_rem;
wire inc_pc;
wire read;
wire write;

wire sampler;                             

// assign statements (if any)                          
final_work i1 (
// port map - connection between master ports and signals/registers   
	.cf_rem(cf_rem),
	.cg_ac(cg_ac),
	.cg_nz(cg_nz),
	.cg_pc(cg_pc),
	.cg_rdm(cg_rdm),
	.cg_ri(cg_ri),
	.Ck(Ck),
	.ctrl_rem(ctrl_rem),
	.inc_pc(inc_pc),
	.instr(instr),
	.N(N),
	.read(read),
	.Rst(Rst),
	.write(write),
	.Z(Z)
);

// Ck
always
begin
	Ck = 1'b0;
	Ck = #10000 1'b1;
	#10000;
end 
// instr[ 3 ]
initial
begin
	instr[3] = 1'b0;
end 
// instr[ 2 ]
initial
begin
	instr[2] = 1'b0;
	instr[2] = #470000 1'b1;
end 
// instr[ 1 ]
initial
begin
	instr[1] = 1'b0;
	instr[1] = #150000 1'b1;
	instr[1] = #320000 1'b0;
	instr[1] = #320000 1'b1;
end 
// instr[ 0 ]
initial
begin
	instr[0] = 1'b1;
	# 150000;
	repeat(2)
	begin
		instr[0] = 1'b0;
		instr[0] = #160000 1'b1;
		# 160000;
	end
	instr[0] = 1'b0;
	instr[0] = #160000 1'b1;
end 

// Z
initial
begin
	Z = 1'b0;
end 

// N
initial
begin
	N = 1'b0;
end 

// Rst
initial
begin
	Rst = 1'b1;
	Rst = #5000 1'b0;
end 

final_work_vlg_sample_tst tb_sample (
	.Ck(Ck),
	.instr(instr),
	.N(N),
	.Rst(Rst),
	.Z(Z),
	.sampler_tx(sampler)
);

final_work_vlg_check_tst tb_out(
	.cf_rem(cf_rem),
	.cg_ac(cg_ac),
	.cg_nz(cg_nz),
	.cg_pc(cg_pc),
	.cg_rdm(cg_rdm),
	.cg_ri(cg_ri),
	.ctrl_rem(ctrl_rem),
	.inc_pc(inc_pc),
	.read(read),
	.write(write),
	.sampler_rx(sampler)
);
endmodule

