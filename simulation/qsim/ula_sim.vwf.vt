// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/01/2022 21:56:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final_work
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_work_vlg_sample_tst(
	a,
	b,
	k,
	sampler_tx
);
input [7:0] a;
input [7:0] b;
input [2:0] k;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or k)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_work_vlg_check_tst (
	bf,
	cf,
	nf,
	s,
	vf,
	zf,
	sampler_rx
);
input  bf;
input  cf;
input  nf;
input [7:0] s;
input  vf;
input  zf;
input sampler_rx;

reg  bf_expected;
reg  cf_expected;
reg  nf_expected;
reg [7:0] s_expected;
reg  vf_expected;
reg  zf_expected;

reg  bf_prev;
reg  cf_prev;
reg  nf_prev;
reg [7:0] s_prev;
reg  vf_prev;
reg  zf_prev;

reg  bf_expected_prev;
reg  cf_expected_prev;
reg  nf_expected_prev;
reg [7:0] s_expected_prev;
reg  vf_expected_prev;
reg  zf_expected_prev;

reg  last_bf_exp;
reg  last_cf_exp;
reg  last_nf_exp;
reg [7:0] last_s_exp;
reg  last_vf_exp;
reg  last_zf_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	bf_prev = bf;
	cf_prev = cf;
	nf_prev = nf;
	s_prev = s;
	vf_prev = vf;
	zf_prev = zf;
end

// update expected /o prevs

always @(trigger)
begin
	bf_expected_prev = bf_expected;
	cf_expected_prev = cf_expected;
	nf_expected_prev = nf_expected;
	s_expected_prev = s_expected;
	vf_expected_prev = vf_expected;
	zf_expected_prev = zf_expected;
end


// expected s[ 7 ]
initial
begin
	s_expected[7] = 1'bX;
end 
// expected s[ 6 ]
initial
begin
	s_expected[6] = 1'bX;
end 
// expected s[ 5 ]
initial
begin
	s_expected[5] = 1'bX;
end 
// expected s[ 4 ]
initial
begin
	s_expected[4] = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 

// expected zf
initial
begin
	zf_expected = 1'bX;
end 

// expected nf
initial
begin
	nf_expected = 1'bX;
end 

// expected cf
initial
begin
	cf_expected = 1'bX;
end 

// expected bf
initial
begin
	bf_expected = 1'bX;
end 

// expected vf
initial
begin
	vf_expected = 1'bX;
end 
// generate trigger
always @(bf_expected or bf or cf_expected or cf or nf_expected or nf or s_expected or s or vf_expected or vf or zf_expected or zf)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bf = %b | expected cf = %b | expected nf = %b | expected s = %b | expected vf = %b | expected zf = %b | ",bf_expected_prev,cf_expected_prev,nf_expected_prev,s_expected_prev,vf_expected_prev,zf_expected_prev);
	$display("| real bf = %b | real cf = %b | real nf = %b | real s = %b | real vf = %b | real zf = %b | ",bf_prev,cf_prev,nf_prev,s_prev,vf_prev,zf_prev);
`endif
	if (
		( bf_expected_prev !== 1'bx ) && ( bf_prev !== bf_expected_prev )
		&& ((bf_expected_prev !== last_bf_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf_expected_prev);
		$display ("     Real value = %b", bf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bf_exp = bf_expected_prev;
	end
	if (
		( cf_expected_prev !== 1'bx ) && ( cf_prev !== cf_expected_prev )
		&& ((cf_expected_prev !== last_cf_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cf_expected_prev);
		$display ("     Real value = %b", cf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cf_exp = cf_expected_prev;
	end
	if (
		( nf_expected_prev !== 1'bx ) && ( nf_prev !== nf_expected_prev )
		&& ((nf_expected_prev !== last_nf_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nf_expected_prev);
		$display ("     Real value = %b", nf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_nf_exp = nf_expected_prev;
	end
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end
	if (
		( s_expected_prev[4] !== 1'bx ) && ( s_prev[4] !== s_expected_prev[4] )
		&& ((s_expected_prev[4] !== last_s_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[4] = s_expected_prev[4];
	end
	if (
		( s_expected_prev[5] !== 1'bx ) && ( s_prev[5] !== s_expected_prev[5] )
		&& ((s_expected_prev[5] !== last_s_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[5] = s_expected_prev[5];
	end
	if (
		( s_expected_prev[6] !== 1'bx ) && ( s_prev[6] !== s_expected_prev[6] )
		&& ((s_expected_prev[6] !== last_s_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[6] = s_expected_prev[6];
	end
	if (
		( s_expected_prev[7] !== 1'bx ) && ( s_prev[7] !== s_expected_prev[7] )
		&& ((s_expected_prev[7] !== last_s_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_exp[7] = s_expected_prev[7];
	end
	if (
		( vf_expected_prev !== 1'bx ) && ( vf_prev !== vf_expected_prev )
		&& ((vf_expected_prev !== last_vf_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vf_expected_prev);
		$display ("     Real value = %b", vf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vf_exp = vf_expected_prev;
	end
	if (
		( zf_expected_prev !== 1'bx ) && ( zf_prev !== zf_expected_prev )
		&& ((zf_expected_prev !== last_zf_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zf_expected_prev);
		$display ("     Real value = %b", zf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_zf_exp = zf_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_work_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg [7:0] b;
reg [2:0] k;
// wires                                               
wire bf;
wire cf;
wire nf;
wire [7:0] s;
wire vf;
wire zf;

wire sampler;                             

// assign statements (if any)                          
final_work i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.bf(bf),
	.cf(cf),
	.k(k),
	.nf(nf),
	.s(s),
	.vf(vf),
	.zf(zf)
);
// a[ 7 ]
initial
begin
	a[7] = 1'b1;
	a[7] = #40000 1'b0;
	a[7] = #80000 1'b1;
	a[7] = #80000 1'b0;
	a[7] = #80000 1'b1;
	a[7] = #160000 1'b0;
	a[7] = #80000 1'b1;
	a[7] = #40000 1'b0;
	a[7] = #40000 1'b1;
	a[7] = #80000 1'b0;
	a[7] = #40000 1'b1;
	a[7] = #40000 1'b0;
	a[7] = #40000 1'b1;
	a[7] = #80000 1'b0;
	a[7] = #40000 1'b1;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b1;
	a[6] = #240000 1'b0;
	a[6] = #160000 1'b1;
	a[6] = #40000 1'b0;
	a[6] = #240000 1'b1;
	a[6] = #40000 1'b0;
	a[6] = #120000 1'b1;
	a[6] = #40000 1'b0;
	a[6] = #40000 1'b1;
	a[6] = #40000 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b1;
	a[5] = #40000 1'b0;
	a[5] = #80000 1'b1;
	a[5] = #40000 1'b0;
	a[5] = #120000 1'b1;
	a[5] = #40000 1'b0;
	a[5] = #40000 1'b1;
	a[5] = #80000 1'b0;
	a[5] = #80000 1'b1;
	a[5] = #80000 1'b0;
	a[5] = #240000 1'b1;
	a[5] = #40000 1'b0;
	a[5] = #40000 1'b1;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
	a[4] = #80000 1'b1;
	a[4] = #120000 1'b0;
	a[4] = #80000 1'b1;
	a[4] = #40000 1'b0;
	a[4] = #160000 1'b1;
	a[4] = #120000 1'b0;
	a[4] = #40000 1'b1;
	a[4] = #80000 1'b0;
	a[4] = #80000 1'b1;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #40000 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #80000 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #80000 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #40000 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #280000 1'b0;
	a[3] = #80000 1'b1;
	a[3] = #40000 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #80000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #200000 1'b1;
	a[2] = #40000 1'b0;
	a[2] = #40000 1'b1;
	a[2] = #80000 1'b0;
	a[2] = #160000 1'b1;
	a[2] = #120000 1'b0;
	a[2] = #40000 1'b1;
	a[2] = #120000 1'b0;
	a[2] = #40000 1'b1;
	a[2] = #120000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #120000 1'b1;
	a[1] = #40000 1'b0;
	a[1] = #40000 1'b1;
	a[1] = #40000 1'b0;
	a[1] = #40000 1'b1;
	a[1] = #200000 1'b0;
	a[1] = #40000 1'b1;
	a[1] = #40000 1'b0;
	a[1] = #160000 1'b1;
	a[1] = #40000 1'b0;
	a[1] = #40000 1'b1;
	a[1] = #160000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
	a[0] = #240000 1'b0;
	a[0] = #200000 1'b1;
	a[0] = #40000 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #120000 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #40000 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #160000 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b1;
	b[7] = #40000 1'b0;
	b[7] = #120000 1'b1;
	b[7] = #120000 1'b0;
	b[7] = #120000 1'b1;
	b[7] = #120000 1'b0;
	b[7] = #80000 1'b1;
	b[7] = #40000 1'b0;
	b[7] = #40000 1'b1;
	b[7] = #80000 1'b0;
	b[7] = #40000 1'b1;
	b[7] = #120000 1'b0;
	b[7] = #40000 1'b1;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
	b[6] = #40000 1'b1;
	b[6] = #80000 1'b0;
	b[6] = #40000 1'b1;
	b[6] = #120000 1'b0;
	b[6] = #80000 1'b1;
	b[6] = #40000 1'b0;
	b[6] = #120000 1'b1;
	b[6] = #40000 1'b0;
	b[6] = #40000 1'b1;
	b[6] = #40000 1'b0;
	b[6] = #40000 1'b1;
	b[6] = #40000 1'b0;
	b[6] = #120000 1'b1;
	b[6] = #40000 1'b0;
	b[6] = #40000 1'b1;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b1;
	b[5] = #40000 1'b0;
	b[5] = #80000 1'b1;
	b[5] = #80000 1'b0;
	b[5] = #80000 1'b1;
	b[5] = #80000 1'b0;
	b[5] = #160000 1'b1;
	b[5] = #80000 1'b0;
	b[5] = #40000 1'b1;
	b[5] = #40000 1'b0;
	b[5] = #40000 1'b1;
	b[5] = #80000 1'b0;
	b[5] = #80000 1'b1;
	b[5] = #80000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b1;
	b[4] = #40000 1'b0;
	b[4] = #120000 1'b1;
	b[4] = #80000 1'b0;
	b[4] = #160000 1'b1;
	b[4] = #40000 1'b0;
	b[4] = #80000 1'b1;
	b[4] = #80000 1'b0;
	b[4] = #80000 1'b1;
	b[4] = #120000 1'b0;
	b[4] = #80000 1'b1;
	b[4] = #80000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #160000 1'b1;
	b[3] = #80000 1'b0;
	b[3] = #120000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #80000 1'b0;
	b[3] = #120000 1'b1;
	b[3] = #120000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #80000 1'b1;
	b[2] = #80000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #80000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #80000 1'b1;
	b[2] = #120000 1'b0;
	b[2] = #80000 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #80000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #240000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #200000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #120000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #80000 1'b0;
	b[0] = #400000 1'b1;
	b[0] = #120000 1'b0;
	b[0] = #80000 1'b1;
	b[0] = #160000 1'b0;
	b[0] = #80000 1'b1;
end 
// k[ 2 ]
initial
begin
	k[2] = 1'b1;
end 
// k[ 1 ]
initial
begin
	k[1] = 1'b1;
end 
// k[ 0 ]
initial
begin
	k[0] = 1'b1;
end 

final_work_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.k(k),
	.sampler_tx(sampler)
);

final_work_vlg_check_tst tb_out(
	.bf(bf),
	.cf(cf),
	.nf(nf),
	.s(s),
	.vf(vf),
	.zf(zf),
	.sampler_rx(sampler)
);
endmodule

