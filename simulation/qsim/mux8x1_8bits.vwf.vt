// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/28/2022 22:36:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final_work
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_work_vlg_sample_tst(
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	h,
	k0,
	k1,
	k2,
	sampler_tx
);
input [7:0] a;
input [7:0] b;
input [7:0] c;
input [7:0] d;
input [7:0] e;
input [7:0] f;
input [7:0] g;
input [7:0] h;
input  k0;
input  k1;
input  k2;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c or d or e or f or g or h or k0 or k1 or k2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_work_vlg_check_tst (
	s,
	sampler_rx
);
input [7:0] s;
input sampler_rx;

reg [7:0] s_expected;

reg [7:0] s_prev;

reg [7:0] s_expected_prev;

reg [7:0] last_s_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	s_prev = s;
end

// update expected /o prevs

always @(trigger)
begin
	s_expected_prev = s_expected;
end


// expected s[ 7 ]
initial
begin
	s_expected[7] = 1'bX;
end 
// expected s[ 6 ]
initial
begin
	s_expected[6] = 1'bX;
end 
// expected s[ 5 ]
initial
begin
	s_expected[5] = 1'bX;
end 
// expected s[ 4 ]
initial
begin
	s_expected[4] = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 
// generate trigger
always @(s_expected or s)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected s = %b | ",s_expected_prev);
	$display("| real s = %b | ",s_prev);
`endif
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end
	if (
		( s_expected_prev[4] !== 1'bx ) && ( s_prev[4] !== s_expected_prev[4] )
		&& ((s_expected_prev[4] !== last_s_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[4] = s_expected_prev[4];
	end
	if (
		( s_expected_prev[5] !== 1'bx ) && ( s_prev[5] !== s_expected_prev[5] )
		&& ((s_expected_prev[5] !== last_s_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[5] = s_expected_prev[5];
	end
	if (
		( s_expected_prev[6] !== 1'bx ) && ( s_prev[6] !== s_expected_prev[6] )
		&& ((s_expected_prev[6] !== last_s_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[6] = s_expected_prev[6];
	end
	if (
		( s_expected_prev[7] !== 1'bx ) && ( s_prev[7] !== s_expected_prev[7] )
		&& ((s_expected_prev[7] !== last_s_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_exp[7] = s_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_work_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg [7:0] b;
reg [7:0] c;
reg [7:0] d;
reg [7:0] e;
reg [7:0] f;
reg [7:0] g;
reg [7:0] h;
reg k0;
reg k1;
reg k2;
// wires                                               
wire [7:0] s;

wire sampler;                             

// assign statements (if any)                          
final_work i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.h(h),
	.k0(k0),
	.k1(k1),
	.k2(k2),
	.s(s)
);
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 
// c[ 7 ]
initial
begin
	c[7] = 1'b0;
end 
// c[ 6 ]
initial
begin
	c[6] = 1'b0;
end 
// c[ 5 ]
initial
begin
	c[5] = 1'b0;
end 
// c[ 4 ]
initial
begin
	c[4] = 1'b0;
end 
// c[ 3 ]
initial
begin
	c[3] = 1'b0;
end 
// c[ 2 ]
initial
begin
	c[2] = 1'b0;
end 
// c[ 1 ]
initial
begin
	c[1] = 1'b1;
end 
// c[ 0 ]
initial
begin
	c[0] = 1'b0;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b0;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b0;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b1;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b1;
end 
// e[ 7 ]
initial
begin
	e[7] = 1'b0;
end 
// e[ 6 ]
initial
begin
	e[6] = 1'b0;
end 
// e[ 5 ]
initial
begin
	e[5] = 1'b0;
end 
// e[ 4 ]
initial
begin
	e[4] = 1'b0;
end 
// e[ 3 ]
initial
begin
	e[3] = 1'b0;
end 
// e[ 2 ]
initial
begin
	e[2] = 1'b1;
end 
// e[ 1 ]
initial
begin
	e[1] = 1'b0;
end 
// e[ 0 ]
initial
begin
	e[0] = 1'b0;
end 
// f[ 7 ]
initial
begin
	f[7] = 1'b0;
end 
// f[ 6 ]
initial
begin
	f[6] = 1'b0;
end 
// f[ 5 ]
initial
begin
	f[5] = 1'b0;
end 
// f[ 4 ]
initial
begin
	f[4] = 1'b0;
end 
// f[ 3 ]
initial
begin
	f[3] = 1'b0;
end 
// f[ 2 ]
initial
begin
	f[2] = 1'b1;
end 
// f[ 1 ]
initial
begin
	f[1] = 1'b0;
end 
// f[ 0 ]
initial
begin
	f[0] = 1'b1;
end 
// g[ 7 ]
initial
begin
	g[7] = 1'b0;
end 
// g[ 6 ]
initial
begin
	g[6] = 1'b0;
end 
// g[ 5 ]
initial
begin
	g[5] = 1'b0;
end 
// g[ 4 ]
initial
begin
	g[4] = 1'b0;
end 
// g[ 3 ]
initial
begin
	g[3] = 1'b0;
end 
// g[ 2 ]
initial
begin
	g[2] = 1'b1;
end 
// g[ 1 ]
initial
begin
	g[1] = 1'b1;
end 
// g[ 0 ]
initial
begin
	g[0] = 1'b0;
end 
// h[ 7 ]
initial
begin
	h[7] = 1'b0;
end 
// h[ 6 ]
initial
begin
	h[6] = 1'b0;
end 
// h[ 5 ]
initial
begin
	h[5] = 1'b0;
end 
// h[ 4 ]
initial
begin
	h[4] = 1'b0;
end 
// h[ 3 ]
initial
begin
	h[3] = 1'b0;
end 
// h[ 2 ]
initial
begin
	h[2] = 1'b1;
end 
// h[ 1 ]
initial
begin
	h[1] = 1'b1;
end 
// h[ 0 ]
initial
begin
	h[0] = 1'b1;
end 

// k2
initial
begin
	repeat(3)
	begin
		k2 = 1'b0;
		k2 = #160000 1'b1;
		# 160000;
	end
	k2 = 1'b0;
end 

// k1
initial
begin
	repeat(6)
	begin
		k1 = 1'b0;
		k1 = #80000 1'b1;
		# 80000;
	end
	k1 = 1'b0;
end 

// k0
initial
begin
	repeat(12)
	begin
		k0 = 1'b0;
		k0 = #40000 1'b1;
		# 40000;
	end
	k0 = 1'b0;
end 

final_work_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.h(h),
	.k0(k0),
	.k1(k1),
	.k2(k2),
	.sampler_tx(sampler)
);

final_work_vlg_check_tst tb_out(
	.s(s),
	.sampler_rx(sampler)
);
endmodule

