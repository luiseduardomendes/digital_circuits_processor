// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2022 23:04:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testes_vlg_sample_tst(
	clock,
	rst,
	sampler_tx
);
input  clock;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clock or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testes_vlg_check_tst (
	ac,
	borrow,
	carry,
	negative,
	overflow,
	pc,
	zero,
	sampler_rx
);
input [7:0] ac;
input  borrow;
input  carry;
input  negative;
input  overflow;
input [7:0] pc;
input  zero;
input sampler_rx;

reg [7:0] ac_expected;
reg  borrow_expected;
reg  carry_expected;
reg  negative_expected;
reg  overflow_expected;
reg [7:0] pc_expected;
reg  zero_expected;

reg [7:0] ac_prev;
reg  borrow_prev;
reg  carry_prev;
reg  negative_prev;
reg  overflow_prev;
reg [7:0] pc_prev;
reg  zero_prev;

reg [7:0] ac_expected_prev;
reg  borrow_expected_prev;
reg  carry_expected_prev;
reg  negative_expected_prev;
reg  overflow_expected_prev;
reg [7:0] pc_expected_prev;
reg  zero_expected_prev;

reg [7:0] last_ac_exp;
reg  last_borrow_exp;
reg  last_carry_exp;
reg  last_negative_exp;
reg  last_overflow_exp;
reg [7:0] last_pc_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	ac_prev = ac;
	borrow_prev = borrow;
	carry_prev = carry;
	negative_prev = negative;
	overflow_prev = overflow;
	pc_prev = pc;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	ac_expected_prev = ac_expected;
	borrow_expected_prev = borrow_expected;
	carry_expected_prev = carry_expected;
	negative_expected_prev = negative_expected;
	overflow_expected_prev = overflow_expected;
	pc_expected_prev = pc_expected;
	zero_expected_prev = zero_expected;
end



// expected borrow
initial
begin
	borrow_expected = 1'bX;
end 

// expected carry
initial
begin
	carry_expected = 1'bX;
end 

// expected negative
initial
begin
	negative_expected = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// expected ac[ 7 ]
initial
begin
	ac_expected[7] = 1'bX;
end 
// expected ac[ 6 ]
initial
begin
	ac_expected[6] = 1'bX;
end 
// expected ac[ 5 ]
initial
begin
	ac_expected[5] = 1'bX;
end 
// expected ac[ 4 ]
initial
begin
	ac_expected[4] = 1'bX;
end 
// expected ac[ 3 ]
initial
begin
	ac_expected[3] = 1'bX;
end 
// expected ac[ 2 ]
initial
begin
	ac_expected[2] = 1'bX;
end 
// expected ac[ 1 ]
initial
begin
	ac_expected[1] = 1'bX;
end 
// expected ac[ 0 ]
initial
begin
	ac_expected[0] = 1'bX;
end 
// generate trigger
always @(ac_expected or ac or borrow_expected or borrow or carry_expected or carry or negative_expected or negative or overflow_expected or overflow or pc_expected or pc or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ac = %b | expected borrow = %b | expected carry = %b | expected negative = %b | expected overflow = %b | expected pc = %b | expected zero = %b | ",ac_expected_prev,borrow_expected_prev,carry_expected_prev,negative_expected_prev,overflow_expected_prev,pc_expected_prev,zero_expected_prev);
	$display("| real ac = %b | real borrow = %b | real carry = %b | real negative = %b | real overflow = %b | real pc = %b | real zero = %b | ",ac_prev,borrow_prev,carry_prev,negative_prev,overflow_prev,pc_prev,zero_prev);
`endif
	if (
		( ac_expected_prev[0] !== 1'bx ) && ( ac_prev[0] !== ac_expected_prev[0] )
		&& ((ac_expected_prev[0] !== last_ac_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[0] = ac_expected_prev[0];
	end
	if (
		( ac_expected_prev[1] !== 1'bx ) && ( ac_prev[1] !== ac_expected_prev[1] )
		&& ((ac_expected_prev[1] !== last_ac_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[1] = ac_expected_prev[1];
	end
	if (
		( ac_expected_prev[2] !== 1'bx ) && ( ac_prev[2] !== ac_expected_prev[2] )
		&& ((ac_expected_prev[2] !== last_ac_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[2] = ac_expected_prev[2];
	end
	if (
		( ac_expected_prev[3] !== 1'bx ) && ( ac_prev[3] !== ac_expected_prev[3] )
		&& ((ac_expected_prev[3] !== last_ac_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[3] = ac_expected_prev[3];
	end
	if (
		( ac_expected_prev[4] !== 1'bx ) && ( ac_prev[4] !== ac_expected_prev[4] )
		&& ((ac_expected_prev[4] !== last_ac_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[4] = ac_expected_prev[4];
	end
	if (
		( ac_expected_prev[5] !== 1'bx ) && ( ac_prev[5] !== ac_expected_prev[5] )
		&& ((ac_expected_prev[5] !== last_ac_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[5] = ac_expected_prev[5];
	end
	if (
		( ac_expected_prev[6] !== 1'bx ) && ( ac_prev[6] !== ac_expected_prev[6] )
		&& ((ac_expected_prev[6] !== last_ac_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[6] = ac_expected_prev[6];
	end
	if (
		( ac_expected_prev[7] !== 1'bx ) && ( ac_prev[7] !== ac_expected_prev[7] )
		&& ((ac_expected_prev[7] !== last_ac_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ac[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ac_expected_prev);
		$display ("     Real value = %b", ac_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ac_exp[7] = ac_expected_prev[7];
	end
	if (
		( borrow_expected_prev !== 1'bx ) && ( borrow_prev !== borrow_expected_prev )
		&& ((borrow_expected_prev !== last_borrow_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port borrow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", borrow_expected_prev);
		$display ("     Real value = %b", borrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_borrow_exp = borrow_expected_prev;
	end
	if (
		( carry_expected_prev !== 1'bx ) && ( carry_prev !== carry_expected_prev )
		&& ((carry_expected_prev !== last_carry_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_carry_exp = carry_expected_prev;
	end
	if (
		( negative_expected_prev !== 1'bx ) && ( negative_prev !== negative_expected_prev )
		&& ((negative_expected_prev !== last_negative_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port negative :: @time = %t",  $realtime);
		$display ("     Expected value = %b", negative_expected_prev);
		$display ("     Real value = %b", negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_negative_exp = negative_expected_prev;
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg rst;
// wires                                               
wire [7:0] ac;
wire borrow;
wire carry;
wire negative;
wire overflow;
wire [7:0] pc;
wire zero;

wire sampler;                             

// assign statements (if any)                          
testes i1 (
// port map - connection between master ports and signals/registers   
	.ac(ac),
	.borrow(borrow),
	.carry(carry),
	.clock(clock),
	.negative(negative),
	.overflow(overflow),
	.pc(pc),
	.rst(rst),
	.zero(zero)
);

// rst
initial
begin
	rst = 1'b1;
	rst = #10000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

testes_vlg_sample_tst tb_sample (
	.clock(clock),
	.rst(rst),
	.sampler_tx(sampler)
);

testes_vlg_check_tst tb_out(
	.ac(ac),
	.borrow(borrow),
	.carry(carry),
	.negative(negative),
	.overflow(overflow),
	.pc(pc),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

