// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/08/2022 20:26:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg rst;
// wires                                               
wire borrow;
wire carry;
wire negative;
wire overflow;
wire [7:0] pc;
wire [7:0] s;
wire zero;

// assign statements (if any)                          
testes i1 (
// port map - connection between master ports and signals/registers   
	.borrow(borrow),
	.carry(carry),
	.clock(clock),
	.negative(negative),
	.overflow(overflow),
	.pc(pc),
	.rst(rst),
	.s(s),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	# 5000;
	repeat(98)
	begin
		clock = 1'b0;
		clock = #5000 1'b1;
		# 5000;
	end
	clock = 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

